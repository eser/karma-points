apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template

metadata:
  name: golang-service-scaffold
  title: Go Service Template
  description: Template for the scaffolder that creates a service project for Go
  tags:
    - recommended
    - golang

spec:
  owner: user:default/eser
  type: service

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:
    - title: Fill in some steps
      required:
        - name
        - owner
      properties:
        name:
          title: Application Name
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        description:
          title: Application Description
          type: string
          description: Description of the component
          ui:options:
            rows: 5
        sonarqubeProjectKey:
          title: Sonarqube Project Key
          type: string
          description: Sonarqube project key for the component
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
          #   allowedOrganizations:
          #     - acikkaynak

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          projectType: service
          lifecycle: pre-release
          owner: ${{ parameters.owner }}
          sonarqubeProjectKey: ${{ parameters.sonarqubeProjectKey }}
          repoUrl: ${{ parameters.repoUrl }}
          githubRepo: ${{ (parameters.repoUrl | parseRepoUrl)['owner'] + "/" + (parameters.repoUrl | parseRepoUrl)['repo'] }}
          slug: ${{ (parameters.repoUrl | parseRepoUrl)['repo'] }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com']
        # allowedOrganizations: ['acikkaynak']
        description: ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
